version: '3.8'

services:
  # FastAPI Backend Service
  backend:
    build:
      context: ./Api
      dockerfile: Dockerfile
    container_name: user-management-api
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    env_file:
      - ./Api/.env
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - api_logs:/app/logs
    depends_on:
      - redis
    labels:
      - "com.docker.compose.service=user-management-api"

  # Angular Frontend Service
  frontend:
    build:
      context: ./WebUI/user-management-app
      dockerfile: Dockerfile
    container_name: user-management-web
    ports:
      - "4201:80"
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      - backend
    labels:
      - "com.docker.compose.service=user-management-web"

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    container_name: user-management-redis
    ports:
      - "6379:6379"
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    labels:
      - "com.docker.compose.service=user-management-redis"

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: user-management-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - user-management-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production
    labels:
      - "com.docker.compose.service=user-management-proxy"

networks:
  user-management-network:
    driver: bridge
    name: user-management-net

volumes:
  redis_data:
    driver: local
    name: user-management-redis-data
  api_logs:
    driver: local
    name: user-management-api-logs